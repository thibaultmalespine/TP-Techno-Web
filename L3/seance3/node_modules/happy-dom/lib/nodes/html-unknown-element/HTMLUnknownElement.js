var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _HTMLUnknownElement_customElementDefineCallback;
import HTMLElement from '../html-element/HTMLElement.js';
import * as PropertySymbol from '../../PropertySymbol.js';
import NodeList from '../node/NodeList.js';
import HTMLCollection from '../element/HTMLCollection.js';
import HTMLElementNamedNodeMap from '../html-element/HTMLElementNamedNodeMap.js';
/**
 * HTML Unknown Element.
 *
 * Reference:
 * https://developer.mozilla.org/en-US/docs/Web/API/HTMLUnknownElement.
 */
export default class HTMLUnknownElement extends HTMLElement {
    constructor() {
        super(...arguments);
        _HTMLUnknownElement_customElementDefineCallback.set(this, null);
    }
    /**
     * Connects this element to another element.
     *
     * @param parentNode Parent node.
     */
    [(_HTMLUnknownElement_customElementDefineCallback = new WeakMap(), PropertySymbol.connectToNode)](parentNode = null) {
        const tagName = this[PropertySymbol.tagName];
        // This element can potentially be a custom element that has not been defined yet
        // Therefore we need to register a callback for when it is defined in CustomElementRegistry and replace it with the registered element (see #404)
        if (tagName.includes('-') &&
            this[PropertySymbol.ownerDocument][PropertySymbol.ownerWindow].customElements[PropertySymbol.callbacks]) {
            const callbacks = this[PropertySymbol.ownerDocument][PropertySymbol.ownerWindow].customElements[PropertySymbol.callbacks];
            if (parentNode && !__classPrivateFieldGet(this, _HTMLUnknownElement_customElementDefineCallback, "f")) {
                const callback = () => {
                    if (this[PropertySymbol.parentNode]) {
                        const newElement = (this[PropertySymbol.ownerDocument].createElement(tagName));
                        newElement[PropertySymbol.childNodes] =
                            this[PropertySymbol.childNodes];
                        newElement[PropertySymbol.children] =
                            this[PropertySymbol.children];
                        newElement[PropertySymbol.isConnected] = this[PropertySymbol.isConnected];
                        newElement[PropertySymbol.rootNode] = this[PropertySymbol.rootNode];
                        newElement[PropertySymbol.formNode] = this[PropertySymbol.formNode];
                        newElement[PropertySymbol.selectNode] = this[PropertySymbol.selectNode];
                        newElement[PropertySymbol.textAreaNode] = this[PropertySymbol.textAreaNode];
                        newElement[PropertySymbol.observers] = this[PropertySymbol.observers];
                        newElement[PropertySymbol.isValue] = this[PropertySymbol.isValue];
                        for (let i = 0, max = this[PropertySymbol.attributes].length; i < max; i++) {
                            newElement[PropertySymbol.attributes].setNamedItem(this[PropertySymbol.attributes][i]);
                        }
                        this[PropertySymbol.childNodes] = new NodeList();
                        this[PropertySymbol.children] = new HTMLCollection();
                        this[PropertySymbol.rootNode] = null;
                        this[PropertySymbol.formNode] = null;
                        this[PropertySymbol.selectNode] = null;
                        this[PropertySymbol.textAreaNode] = null;
                        this[PropertySymbol.observers] = [];
                        this[PropertySymbol.isValue] = null;
                        this[PropertySymbol.attributes] =
                            new HTMLElementNamedNodeMap(this);
                        for (let i = 0, max = this[PropertySymbol.parentNode][PropertySymbol.childNodes]
                            .length; i < max; i++) {
                            if (this[PropertySymbol.parentNode][PropertySymbol.childNodes][i] ===
                                this) {
                                this[PropertySymbol.parentNode][PropertySymbol.childNodes][i] =
                                    newElement;
                                break;
                            }
                        }
                        if (this[PropertySymbol.parentNode][PropertySymbol.children]) {
                            for (let i = 0, max = this[PropertySymbol.parentNode][PropertySymbol.children]
                                .length; i < max; i++) {
                                if (this[PropertySymbol.parentNode][PropertySymbol.children][i] ===
                                    this) {
                                    this[PropertySymbol.parentNode][PropertySymbol.children][i] =
                                        newElement;
                                    break;
                                }
                            }
                        }
                        if (newElement[PropertySymbol.isConnected] && newElement.connectedCallback) {
                            newElement.connectedCallback();
                        }
                        this[PropertySymbol.connectToNode](null);
                    }
                };
                callbacks[tagName] = callbacks[tagName] || [];
                callbacks[tagName].push(callback);
                __classPrivateFieldSet(this, _HTMLUnknownElement_customElementDefineCallback, callback, "f");
            }
            else if (!parentNode && callbacks[tagName] && __classPrivateFieldGet(this, _HTMLUnknownElement_customElementDefineCallback, "f")) {
                const index = callbacks[tagName].indexOf(__classPrivateFieldGet(this, _HTMLUnknownElement_customElementDefineCallback, "f"));
                if (index !== -1) {
                    callbacks[tagName].splice(index, 1);
                }
                if (!callbacks[tagName].length) {
                    delete callbacks[tagName];
                }
                __classPrivateFieldSet(this, _HTMLUnknownElement_customElementDefineCallback, null, "f");
            }
        }
        super[PropertySymbol.connectToNode](parentNode);
    }
}
//# sourceMappingURL=HTMLUnknownElement.js.map